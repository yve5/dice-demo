{"version":3,"sources":["features/arena/resources/frame-gradient.svg","features/arena/resources/Utilities.jsx","features/arena/components/Arena.jsx","features/arena/resources/constants.jsx","features/arena/actions/All.jsx","App.jsx","serviceWorker.jsx","features/arena/reducer/Reducer.jsx","config/reducers.jsx","config/store.jsx","index.jsx"],"names":["module","exports","insidePolygon","polygon","x","y","inside","i","j","length","xi","yi","xj","yj","Arena","props","canvas","React","createRef","drawBoard","bind","drawHexagon","loop","onLoad","mouseMove","count","img","Image","this","current","_setPolygons","width","columns","rows","top","left","hexagons","dimension","thirtyDegreesInRadians","adjacent","side","Math","cos","opposite","sin","push","generateHexagons","addEventListener","window","requestAnimationFrame","eventInfo","polygons","root","arena","_hoverPolygon","offsetX","layerX","offsetY","layerY","found","target","ctx","getContext","map","index","onload","src","frames","strokeStyle","fillStyle","fillRect","drawImage","context","fill","beginPath","lineTo","moveTo","closePath","stroke","data-testid","height","ref","Component","connect","state","dispatch","type","setPolygons","App","className","Boolean","location","hostname","match","initialState","undefined","reducer","action","createRootReducers","combineReducers","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","ReactReduxContext","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.408428fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/frame-gradient.174d5840.svg\";","export const insidePolygon = function checkIfPointIsInsidePolygonThanksToRayCastingAlgorithm(\n  { x, y },\n  polygon\n) {\n  // https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html/pnpoly.html\n  let inside = false;\n\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const xi = polygon[i].x;\n    const yi = polygon[i].y;\n\n    const xj = polygon[j].x;\n    const yj = polygon[j].y;\n\n    const cond11 = yi > y;\n    const cond12 = yj > y;\n\n    const cond21 = xj - xi;\n    const cond22 = y - yi;\n    const cond23 = yj - yi;\n\n    if (cond11 !== cond12 && x < (cond21 * cond22) / cond23 + xi) {\n      inside = !inside;\n    }\n  }\n\n  return inside;\n};\n\nexport const generateHexagons = (\n  width = 500,\n  columns = 10,\n  rows = 5,\n  top = 0,\n  left = 0\n) => {\n  const hexagons = [];\n  const dimension = width / columns;\n  const thirtyDegreesInRadians = 0.523598776;\n  const adjacent = dimension / 2;\n  const side = adjacent / Math.cos(thirtyDegreesInRadians);\n  const opposite = side * Math.sin(thirtyDegreesInRadians);\n\n  for (let i = 0; i < columns; i++) {\n    for (let j = 0; j < rows; j++) {\n      const x = left + i * dimension + (j % 2) * adjacent;\n      const y = top + j * (opposite + side);\n\n      hexagons.push([\n        { x: x + adjacent, y },\n        { x: x + dimension, y: y + opposite },\n        { x: x + dimension, y: y + opposite + side },\n        { x: x + adjacent, y: y + side + 2 * opposite },\n        { x, y: y + opposite + side },\n        { x, y: y + opposite },\n      ]);\n    }\n  }\n\n  return hexagons;\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { CANVAS_WIDTH, CANVAS_HEIGHT } from '../resources/constants';\nimport { hoverPolygon, setPolygons } from '../actions/All';\nimport { generateHexagons, insidePolygon } from '../resources/Utilities';\n\nimport frames from '../resources/frame-gradient.svg';\n\nclass Arena extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n\n    this.drawBoard = this.drawBoard.bind(this);\n    this.drawHexagon = this.drawHexagon.bind(this);\n    this.loop = this.loop.bind(this);\n    this.onLoad = this.onLoad.bind(this);\n    this.mouseMove = this.mouseMove.bind(this);\n\n    this.count = 1;\n    this.img = new Image();\n  }\n\n  componentDidMount() {\n    const canvas = this.canvas.current;\n    const { _setPolygons } = this.props;\n\n    _setPolygons(generateHexagons(500, 20, 17, 10, 20));\n\n    canvas.addEventListener('mousemove', this.mouseMove);\n    // canvas.addEventListener('click', () => {});\n\n    window.requestAnimationFrame(this.loop);\n  }\n\n  loop() {\n    this.drawBoard();\n    window.requestAnimationFrame(this.loop);\n  }\n\n  mouseMove(eventInfo) {\n    const {\n      root: {\n        arena: { polygons },\n      },\n      _hoverPolygon,\n    } = this.props;\n\n    const x = eventInfo.offsetX || eventInfo.layerX;\n    const y = eventInfo.offsetY || eventInfo.layerY;\n\n    let i = 0;\n    let found = false;\n\n    while (i < polygons.length && !found) {\n      if (insidePolygon({ x, y }, polygons[i])) {\n        _hoverPolygon(i);\n        found = !found;\n      }\n      i++;\n    }\n  }\n\n  drawBoard() {\n    const {\n      root: {\n        arena: { polygons, target },\n      },\n    } = this.props;\n\n    const canvas = this.canvas.current;\n    const ctx = canvas.getContext('2d');\n\n    polygons.map((polygon, index) =>\n      this.drawHexagon(ctx, polygon, index === target)\n    );\n\n    this.img.onload = this.onLoad;\n    this.img.src = frames;\n  }\n\n  onLoad() {\n    const canvas = this.canvas.current;\n    const ctx = canvas.getContext('2d');\n\n    ctx.strokeStyle = '';\n    ctx.fillStyle = '#0f0';\n    ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n    ctx.drawImage(\n      this.img,\n      0,\n      (this.count * 100) % 10100,\n      100,\n      100,\n      400,\n      400,\n      100,\n      100\n    );\n\n    this.count++;\n  }\n\n  drawHexagon(context, polygon, fill = false) {\n    context.beginPath();\n    for (let i = 0; i < polygon.length; i++) {\n      const { x, y } = polygon[i];\n      if (i) {\n        context.lineTo(x, y);\n      } else {\n        context.moveTo(x, y);\n      }\n    }\n    context.closePath();\n\n    if (fill) {\n      context.strokeStyle = '';\n      context.fillStyle = '#00f';\n      context.fill();\n    } else {\n      context.stroke();\n    }\n  }\n\n  render() {\n    return (\n      <canvas\n        data-testid='mainCanvas'\n        height={CANVAS_HEIGHT}\n        ref={this.canvas}\n        width={CANVAS_WIDTH}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  root: state,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  _hoverPolygon: (polygons) => dispatch(hoverPolygon(polygons)),\n  _setPolygons: (polygons) => dispatch(setPolygons(polygons)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Arena);\n","export const CANVAS_WIDTH = 600;\nexport const CANVAS_HEIGHT = 600;\n\nexport const BOARD_WIDTH = 10;\nexport const BOARD_HEIGHT = 5;\n\nexport const ARENA_HOVER_POLYGON = 'ARENA_HOVER_POLYGON';\nexport const ARENA_SET_POLYGONS = 'ARENA_SET_POLYGONS';\n","import {\n  ARENA_HOVER_POLYGON,\n  ARENA_SET_POLYGONS,\n} from '../resources/constants';\n\nexport const setPolygons = (polygons) => ({\n  type: ARENA_SET_POLYGONS,\n  polygons,\n});\n\nexport const hoverPolygon = (target) => ({\n  type: ARENA_HOVER_POLYGON,\n  target,\n});\n","import React from 'react';\nimport './style/App.scss';\nimport Arena from './features/arena/components/Arena';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Arena />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  ARENA_HOVER_POLYGON,\n  ARENA_SET_POLYGONS,\n} from '../resources/constants';\n\nconst initialState = {\n  polygons: [],\n  target: undefined,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ARENA_HOVER_POLYGON:\n    case ARENA_SET_POLYGONS:\n      return {\n        ...state,\n        ...action,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport arena from '../features/arena/reducer/Reducer';\n\nconst createRootReducers = () =>\n  combineReducers({\n    arena\n  });\n\nexport default createRootReducers;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createRootReducers from './reducers';\n\nconst middlewares = [];\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  createRootReducers(),\n  composeEnhancer(applyMiddleware(...middlewares))\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider, ReactReduxContext } from 'react-redux';\nimport store from './config/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App context={ReactReduxContext} />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}