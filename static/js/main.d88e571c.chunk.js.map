{"version":3,"sources":["features/arena/resources/constants.jsx","features/arena/components/Arena.jsx","features/arena/actions/All.jsx","App.jsx","serviceWorker.jsx","features/arena/reducer/Reducer.jsx","config/rootReducers.jsx","config/store.jsx","index.jsx"],"names":["HEX_HEIGHT","Math","sin","HEX_RADIUS","cos","HEX_RECTANGLE_HEIGHT","HEX_RECTANGLE_WIDTH","Arena","props","canvas","React","createRef","drawBoard","bind","drawHexagon","drawLine","mouseMove","_sayHello","this","current","ctx","getContext","addEventListener","console","log","eventInfo","x","offsetX","layerX","y","offsetY","layerY","hexY","floor","hexX","screenX","screenY","clearRect","width","height","strokeStyle","fillStyle","context","fillRect","i","j","fill","coordinates","beginPath","length","lineTo","moveTo","closePath","stroke","data-testid","ref","Component","connect","state","root","dispatch","type","message","App","className","Boolean","window","location","hostname","match","initialState","reducer","action","createRootReducers","combineReducers","arena","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","ReactReduxContext","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d88e571c.chunk.js","sourcesContent":["export const ARENA_HELLO = 'ARENA_HELLO';\n\nexport const CANVAS_WIDTH = 600;\nexport const CANVAS_HEIGHT = 600;\n// export const GOLDEN_RATIO = 1.618;\n// export const CANVAS_HEIGHT = Math.floor(CANVAS_WIDTH * GOLDEN_RATIO);\n\nexport const BOARD_WIDTH = 10;\nexport const BOARD_HEIGHT = 5;\n\nexport const HEXAGON_ANGLE = 0.523598776; // 30 degrees in radians\nexport const SIDE_LENGTH = 32;\n\nexport const HEX_HEIGHT = Math.sin(HEXAGON_ANGLE) * SIDE_LENGTH;\nexport const HEX_RADIUS = Math.cos(HEXAGON_ANGLE) * SIDE_LENGTH;\nexport const HEX_RECTANGLE_HEIGHT = SIDE_LENGTH + 2 * HEX_HEIGHT;\nexport const HEX_RECTANGLE_WIDTH = 2 * HEX_RADIUS;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  BOARD_HEIGHT,\n  BOARD_WIDTH,\n  CANVAS_WIDTH,\n  CANVAS_HEIGHT,\n  HEX_HEIGHT,\n  HEX_RADIUS,\n  HEX_RECTANGLE_HEIGHT,\n  HEX_RECTANGLE_WIDTH,\n  SIDE_LENGTH\n} from '../resources/constants';\nimport { sayHello } from '../actions/All';\n\nclass Arena extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n\n    this.drawBoard = this.drawBoard.bind(this);\n    this.drawHexagon = this.drawHexagon.bind(this);\n    this.drawLine = this.drawLine.bind(this);\n    this.mouseMove = this.mouseMove.bind(this);\n  }\n\n  componentDidMount() {\n    const { _sayHello } = this.props;\n\n    const canvas = this.canvas.current;\n    const ctx = canvas.getContext('2d');\n\n    this.drawBoard(ctx, BOARD_WIDTH, BOARD_HEIGHT);\n\n    canvas.addEventListener('mousemove', this.mouseMove);\n    canvas.addEventListener('click', () => {\n      console.log('Hello World');\n      _sayHello();\n    });\n  }\n\n  mouseMove(eventInfo) {\n    const canvas = this.canvas.current;\n    const ctx = canvas.getContext('2d');\n\n    const x = eventInfo.offsetX || eventInfo.layerX;\n    const y = eventInfo.offsetY || eventInfo.layerY;\n\n    const hexY = Math.floor(y / (HEX_HEIGHT + SIDE_LENGTH));\n    const hexX = Math.floor(\n      (x - (hexY % 2) * HEX_RADIUS) / HEX_RECTANGLE_WIDTH\n    );\n\n    const screenX = hexX * HEX_RECTANGLE_WIDTH + (hexY % 2) * HEX_RADIUS;\n    const screenY = hexY * (HEX_HEIGHT + SIDE_LENGTH);\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    this.drawBoard(ctx, BOARD_WIDTH, BOARD_HEIGHT);\n\n    // Check if the mouse's coords are on the board\n    if (hexX >= 0 && hexX < BOARD_WIDTH) {\n      if (hexY >= 0 && hexY < BOARD_HEIGHT) {\n        ctx.strokeStyle = '';\n        ctx.fillStyle = '#000';\n        this.drawHexagon(ctx, screenX, screenY, true);\n      }\n    }\n\n    this.drawLine(ctx, x, y);\n  }\n\n  drawBoard(context, width, height) {\n    context.strokeStyle = '';\n    context.fillStyle = '#0f0';\n    context.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n    for (let i = 0; i < width; i++) {\n      for (let j = 0; j < height; j++) {\n        this.drawHexagon(\n          context,\n          i * HEX_RECTANGLE_WIDTH + (j % 2) * HEX_RADIUS,\n          j * (SIDE_LENGTH + HEX_HEIGHT)\n        );\n      }\n    }\n\n    context.strokeStyle = '';\n    context.fillStyle = '#00f';\n    this.drawHexagon(context, 100, 400, true);\n  }\n\n  drawHexagon(context, x, y, fill = false) {\n    const coordinates = [\n      { x: x + HEX_RADIUS, y },\n      { x: x + HEX_RECTANGLE_WIDTH, y: y + HEX_HEIGHT },\n      { x: x + HEX_RECTANGLE_WIDTH, y: y + HEX_HEIGHT + SIDE_LENGTH },\n      { x: x + HEX_RADIUS, y: y + HEX_RECTANGLE_HEIGHT },\n      { x, y: y + SIDE_LENGTH + HEX_HEIGHT },\n      { x, y: y + HEX_HEIGHT }\n    ];\n\n    context.beginPath();\n    for (let i = 0; i < coordinates.length; i++) {\n      const { x, y } = coordinates[i];\n      if (i) {\n        context.lineTo(x, y);\n      } else {\n        context.moveTo(x, y);\n      }\n    }\n    context.closePath();\n\n    if (fill) {\n      context.fill();\n    } else {\n      context.stroke();\n    }\n  }\n\n  drawLine(context, x, y) {\n    context.strokeStyle = '#f00';\n\n    context.beginPath();\n    context.moveTo(0, y);\n    context.lineTo(x, y);\n    context.closePath();\n\n    context.stroke();\n  }\n\n  render() {\n    return (\n      <canvas\n        data-testid=\"mainCanvas\"\n        height={CANVAS_HEIGHT}\n        ref={this.canvas}\n        width={CANVAS_WIDTH}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  root: state\n});\n\nconst mapDispatchToProps = dispatch => ({\n  _sayHello: () => dispatch(sayHello())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Arena);\n","import { ARENA_HELLO } from '../resources/constants';\n\nexport const sayHello = function sayHelloWithAction() {\n  return {\n    type: ARENA_HELLO,\n    message: 'Hello World'\n  };\n};\n","import React from 'react';\nimport './style/App.scss';\nimport Arena from './features/arena/components/Arena';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Arena />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ARENA_HELLO } from '../resources/constants';\n\nconst initialState = {\n  message: ''\n};\n\nconst reducer = function(state = initialState, action) {\n  switch (action.type) {\n    case ARENA_HELLO:\n      return {\n        ...state,\n        ...action\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport arena from '../features/arena/reducer/Reducer';\n\nconst createRootReducers = () =>\n  combineReducers({\n    arena\n  });\n\nexport default createRootReducers;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createRootReducers from './rootReducers';\n\nconst middlewares = [];\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  createRootReducers(),\n  composeEnhancer(applyMiddleware(...middlewares))\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider, ReactReduxContext } from 'react-redux';\nimport store from './config/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App context={ReactReduxContext} />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}